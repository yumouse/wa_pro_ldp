import sys
sys.path.append('./nwk')
sys.path.append('./wk')
sys.path.append('./src')
import PrivKVD
import PrivKV
import PrivKVM
import PrivKVMplus
import Map
import gen
import time
import matplotlib.pyplot as plt
import numpy as np

# All needed parameters
u = 1000
k = 5
e1 = 0.2
e2 = 0.2
c = 4
A0 = 0.1

execute_time1 = []
execute_time2 = []
execute_time3 = []
execute_time4 = []

for i in range(30):
    temp1 = 0
    temp2 = 0
    temp3 = 0
    temp4 = 0
    print(i)
    for i in range(20):
        # S1 is discretized value
        S1 = gen.generator(u,k).gen_new()
        # nfstar is the result of PrivKVD

        time1_start = time.time()
        nfstar = PrivKVD.PrivKVD(S1,k,e1) 
        time1_end = time.time()
        K=[]
        for index in range(k):
            K.append('tmp')
        # S2 is for PrivKV and generated by S1

        time2_start = time.time()
        S2 = np.array([Map.map(si,k) for si in S1])
        vec = PrivKV.PrivKV(S2,K,e1,e2)
        fstar = vec[0]
        time2_end  = time.time()

        time3_start = time.time()
        S3 = np.array([Map.map(si,k) for si in S1])
        vec = PrivKVM.PrivKVM(S3,K,e1,c)
        mfstar = vec[0]
        time3_end = time.time()

        time4_start = time.time()
        S4 = np.array([Map.map(si,k) for si in S1])
        vec = PrivKVMplus.PrivKVMplus(S4,K,e1,A0)
        pfstar = vec[0]
        time4_end = time.time()
        
        temp1 += time1_end - time1_start
        temp2 += time2_end - time2_start
        temp3 += time3_end - time3_start
        temp4 += time4_end - time4_start
        
    execute_time1.append(temp1/10)
    execute_time2.append(temp2/10)
    execute_time3.append(temp3/10)
    execute_time4.append(temp4/10)

content = ['PrivKVD','PrivKV','PrivKVM','PrivKVM+']
xRay = [i for i in range(1,31)]
yRay = [execute_time1,execute_time2,execute_time3,execute_time4]
color = ['green','blue','skyblue','hotpink','red','olive','yellow',]
colorPos = 0
for i in range(4):
    x = np.array(xRay)
    y = np.array(yRay[i])
    parameter = np.polyfit(x, y, 5)
    p = np.poly1d(parameter)
    plt.scatter(x,y)
    plt.plot(x, p(x), color=color[colorPos], label=content[i])	
    colorPos += 1    
plt.title('Graph of time comparison in different LDP [u=10^3/k=5/e1=0.2/e2=0.2/c=4/A0=0.1]')
plt.xlabel('number')
plt.ylabel('time/s')
plt.legend()
plt.show()